diff --git a/src/desock.c b/src/desock.c
index 85a28c7..373fc00 100644
--- a/src/desock.c
+++ b/src/desock.c
@@ -1,6 +1,8 @@
 #define _GNU_SOURCE
 
+#include <assert.h>
 #include <netinet/in.h>
+#include <sys/stat.h>
 #include <sys/socket.h>
 #include <sys/types.h>
 #include <pthread.h>
@@ -8,6 +10,7 @@
 #include <unistd.h>
 #include <string.h>
 #include <signal.h>
+#include <fcntl.h>
 #include <dlfcn.h>
 #include <errno.h>
 #include <stdio.h>
@@ -18,66 +21,63 @@
 #define PREENY_MAX_FD 8192
 #define PREENY_SOCKET_OFFSET 500
 #define READ_BUF_SIZE 65536
+#define INPUT_FILE_PATH_ENV "PREENY_DESOCK_INFILE"
 
 #define PREENY_SOCKET(x) (x+PREENY_SOCKET_OFFSET)
 
 int preeny_desock_shutdown_flag = 0;
-int preeny_desock_did_accept = 0;
+int in_fd = 0;
 
 pthread_t *preeny_socket_threads_to_front[PREENY_MAX_FD] = { 0 };
 pthread_t *preeny_socket_threads_to_back[PREENY_MAX_FD] = { 0 };
 
-int preeny_socket_sync(int from, int to, int timeout)
-{
-	struct pollfd poll_in = { from, POLLIN, 0 };
-	char read_buf[READ_BUF_SIZE];
-	int total_n;
-	char error_buf[1024];
-	int n;
-	int r;
-
-	r = poll(&poll_in, 1, timeout);
-	if (r < 0)
-	{
-		strerror_r(errno, error_buf, 1024);
-		preeny_debug("read poll() received error '%s' on fd %d\n", error_buf, from);
-		return 0;
-	}
-	else if (poll_in.revents == 0)
-	{
-		preeny_debug("read poll() timed out on fd %d\n", from);
-		return 0;
-	}
-
-	total_n = read(from, read_buf, READ_BUF_SIZE);
-	if (total_n < 0)
-	{
-		strerror_r(errno, error_buf, 1024);
-		preeny_info("synchronization of fd %d to %d shutting down due to read error '%s'\n", from, to, error_buf);
-		return -1;
-	}
-	else if (total_n == 0 && from == 0)
-	{
-		preeny_info("synchronization of fd %d to %d shutting down due to EOF\n", from, to);
-		return -1;
-	}
-	preeny_debug("read %d bytes from %d (will write to %d)\n", total_n, from, to);
-
-	n = 0;
-	while (n != total_n)
-	{
-		r = write(to, read_buf, total_n - n);
-		if (r < 0)
-		{
-			strerror_r(errno, error_buf, 1024);
-			preeny_info("synchronization of fd %d to %d shutting down due to read error '%s'\n", from, to, error_buf);
-			return -1;
-		}
-		n += r;
-	}
-
-	preeny_debug("wrote %d bytes to %d (had read from %d)\n", total_n, to, from);
-	return total_n;
+int preeny_socket_sync(int from, int to, int timeout) {
+  struct pollfd poll_in = {from, POLLIN, 0};
+  char read_buf[READ_BUF_SIZE];
+  int total_n;
+  char error_buf[1024];
+  int n;
+  int r;
+
+  r = poll(&poll_in, 1, timeout);
+  if (r < 0) {
+    strerror_r(errno, error_buf, 1024);
+    preeny_debug("read poll() received error '%s' on fd %d\n", error_buf, from);
+    return 0;
+  } else if (poll_in.revents == 0) {
+    preeny_debug("read poll() timed out on fd %d\n", from);
+    return 0;
+  }
+
+  total_n = read(from, read_buf, READ_BUF_SIZE);
+  if (total_n < 0) {
+    strerror_r(errno, error_buf, 1024);
+    preeny_info(
+        "synchronization of fd %d to %d shutting down due to read error '%s'\n",
+        from, to, error_buf);
+    return -1;
+  } else if (total_n == 0 && from == 0) {
+    preeny_info("synchronization of fd %d to %d shutting down due to EOF\n",
+                from, to);
+    return -1;
+  }
+  preeny_debug("read %d bytes from %d (will write to %d)\n", total_n, from, to);
+
+  n = 0;
+  while (n != total_n) {
+    r = write(to, read_buf, total_n - n);
+    if (r < 0) {
+      strerror_r(errno, error_buf, 1024);
+      preeny_info("synchronization of fd %d to %d shutting down due to read "
+                  "error '%s'\n",
+                  from, to, error_buf);
+      return -1;
+    }
+    n += r;
+  }
+
+  preeny_debug("wrote %d bytes to %d (had read from %d)\n", total_n, to, from);
+  return total_n;
 }
 
 __attribute__((destructor)) void preeny_desock_shutdown()
@@ -88,6 +88,8 @@ __attribute__((destructor)) void preeny_desock_shutdown()
 	preeny_debug("shutting down desock...\n");
 	preeny_desock_shutdown_flag = 1;
 
+	return;
+
 
 	for (i = 0; i < PREENY_MAX_FD; i++)
 	{
@@ -133,7 +135,7 @@ void *preeny_socket_sync_to_back(void *fd)
 {
 	int front_fd = (int)fd;
 	int back_fd = PREENY_SOCKET(front_fd);
-	preeny_socket_sync_loop(back_fd, 1);
+	// preeny_socket_sync_loop(back_fd, 1);
 	return NULL;
 }
 
@@ -141,7 +143,8 @@ void *preeny_socket_sync_to_front(void *fd)
 {
 	int front_fd = (int)fd;
 	int back_fd = PREENY_SOCKET(front_fd);
-	preeny_socket_sync_loop(0, back_fd);
+	/* Read fd here */
+	preeny_socket_sync_loop(in_fd, back_fd);
 	return NULL;
 }
 
@@ -160,6 +163,11 @@ __attribute__((constructor)) void preeny_desock_orig()
 	original_accept = dlsym(RTLD_NEXT, "accept");
 	original_bind = dlsym(RTLD_NEXT, "bind");
 	original_connect = dlsym(RTLD_NEXT, "connect");
+
+	if (getenv(INPUT_FILE_PATH_ENV) != NULL) {
+		in_fd = open(getenv(INPUT_FILE_PATH_ENV), O_RDONLY);
+		assert(in_fd != -1 && "Input file not found");
+	}
 }
 
 int socket(int domain, int type, int protocol)
@@ -187,6 +195,7 @@ int socket(int domain, int type, int protocol)
 
 	front_socket = fds[0];
 	back_socket = dup2(fds[1], PREENY_SOCKET(front_socket));
+	printf("front = %d, back = %d\n", front_socket, back_socket);
 	close(fds[1]);
 
 	preeny_debug("... dup into socketpair (%d, %d)\n", fds[0], back_socket);
@@ -213,10 +222,6 @@ int socket(int domain, int type, int protocol)
 
 int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)
 {
-	if (preeny_desock_did_accept)
-		exit(0);
-	preeny_desock_did_accept = 1;
-
 	//initialize a sockaddr_in for the peer
 	 struct sockaddr_in peer_addr;
 	 memset(&peer_addr, '0', sizeof(struct sockaddr_in));
